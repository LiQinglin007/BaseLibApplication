<?xml version="1.0" encoding="utf-8"?>
<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/design_drawer"
    android:layout_width="match_parent"
    android:layout_height="match_parent">


    <android.support.design.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:fitsSystemWindows="true"
        android:orientation="vertical">

        <android.support.design.widget.AppBarLayout
            android:id="@+id/design_appbar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <!--layout_scrollFlags的解释-->
            <!--scroll：这个是说所有的要滚出屏幕的子view都要设置这个属性
            这里注意，如果有多个子View,那么前边的子View一定要设置这个属性，要不然后边的都没有作用了
            这时候layout_scrollFlags="scroll"-->

            <!--<TextView-->
            <!--android:layout_width="match_parent"-->
            <!--android:layout_height="wrap_content"-->
            <!--android:text="asd"-->
            <!--android:textColor="@color/color_white" />-->

            <!--enterAlways：快速返回，在底部往下一拉，就看是显示这个view
            这时候layout_scrollFlags="scroll|enterAlways"-->

            <!--snap:具有一个吸附功能，就是要么显示要么不显示，中间的效果不会停留
            这时候layout_scrollFlags="scroll|snap"-->

            <!--enterAlwaysCollapsed:这个和minHeight的值有关系，
            看效果的话，需要把minHeight和height的值有一个明显的差距。
            先向上滑动一块，然后向上滑动的时候，看这个效果。你会发现首先受影响的是子View,这里就是toolbar,
            这个子view先显示出最小高度之后，然后受影响的才是下边的滚动view,也就是这里的NestedScrollView，
            然后当NestedScrollView滑动到顶部了，接着受影响的是toolbar,它会从刚才的最小高度继续变化，直到完全显示
            这时候layout_scrollFlags="scroll|enterAlways|enterAlwaysCollapsed"-->


            <!--exitUntilCollapsed：这个也是和minHeight有关系，体现在从顶部向上滑动的时候。-->
            <!--子view，也就是Toolbar会滚动到最小高度，然后固定，然后下边的NestedScrollView滚动。-->
            <!--也就是说这是状态下，子view是不是完全滚出屏幕的。-->
            <!--这时候layout_scrollFlags="scroll|exitUntilCollapsed"-->
            <android.support.v7.widget.Toolbar
                android:id="@+id/design_toolbar"
                android:layout_width="match_parent"
                android:layout_height="@dimen/px_200"
                android:gravity="center_horizontal"
                android:minHeight="@dimen/px_120"
                app:layout_scrollFlags="scroll">

                <android.support.v7.widget.AppCompatTextView
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:gravity="center"
                    android:text="我是标题"
                    android:textColor="@color/color_white"
                    android:textSize="@dimen/px_32" />

            </android.support.v7.widget.Toolbar>

            <android.support.v7.widget.AppCompatTextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:gravity="center"
                android:text="我是不跟随滚动出屏幕的view"
                android:textColor="@color/color_white" />

        </android.support.design.widget.AppBarLayout>

        <android.support.v7.widget.RecyclerView
            android:id="@+id/design_recycler"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_behavior="@string/appbar_scrolling_view_behavior"></android.support.v7.widget.RecyclerView>

        <!--app:backgroundTint - 设置FAB的背景颜色。-->
        <!--app:rippleColor - 设置FAB点击时的背景颜色。-->
        <!--app:borderWidth - 该属性尤为重要，如果不设置0dp，那么在4.1的sdk上FAB会显示为正方形，而且在5.0以后的sdk没有阴影效果。所以设置为borderWidth="0dp"。-->
        <!--app:elevation - 默认状态下FAB的阴影大小。-->
        <!--app:pressedTranslationZ - 点击时候FAB的阴影大小。-->
        <!--app:fabSize - 设置FAB的大小，该属性有两个值，分别为normal和mini，对应的FAB大小分别为56dp和40dp。-->
        <!--src - 设置FAB的图标，Google建议符合Design设计的该图标大小为24dp。-->
        <!--app:layout_anchor - 设置FAB的锚点，即以哪个控件为参照点设置位置，如果是在列表界面中，这个值通常设置为列表控件的id。-->
        <!--app:layout_anchorGravity - 设置FAB相对锚点的位置，值有 bottom、center、right、left、top等。-->
        <android.support.design.widget.FloatingActionButton
            android:id="@+id/design_floating"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginBottom="@dimen/px_40"
            android:layout_marginRight="@dimen/px_40"
            android:src="@drawable/icon_arrow_up"
            app:borderWidth="0dp"
            app:fabSize="normal"
            app:layout_anchor="@id/design_recycler"
            app:layout_anchorGravity="right|bottom"
            app:layout_behavior=".ui.mDesign.Behavior.ScrollAwareFABBehavior"
            app:rippleColor="@color/warning_color1" />


    </android.support.design.widget.CoordinatorLayout>
    <!--layout_gravity：侧滑的位置(左边出来还是右边出来)-->
    <!--headerLayout：头布局，也可以在代码中调用addHeaderView来实现-->
    <!--menu：侧滑出来的菜单-->
    <android.support.design.widget.NavigationView
        android:id="@+id/design_nav"
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:layout_gravity="left"
        android:fitsSystemWindows="true"
        app:headerLayout="@layout/design_head_layout"
        app:menu="@menu/design_menu"></android.support.design.widget.NavigationView>

</android.support.v4.widget.DrawerLayout>
